/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.69
 * Generated at: 2023-01-18 03:12:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class event_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1671504870577L));
    _jspx_dependants.put("jar:file:/C:/Users/ezen/Desktop/최신/book1-main%20(1)/book1-main/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/book/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/ezen/Desktop/최신/book1-main%20(1)/book1-main/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/book/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("       \n");
      out.write("        \n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\n");
      out.write(".event_main {\n");
      out.write("   margin:0 auto;\n");
      out.write("   width: 1260px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<link rel=\"stylesheet\" href=\"/resources/css/main.css\" type=\"text/css\" />\n");
      out.write("<script type=\"text/javascript\" src=\"/resources/js/Winwheel.js\"></script>\n");
      out.write("<script src=\"http://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenMax.min.js\"></script>\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./layout/header.jsp", out, false);
      out.write("\n");
      out.write("<div class=\"event_main\"> \n");
      out.write("\n");
      out.write("            <h1>포인트 향상 이벤트</h1>\n");
      out.write("         <h1>WW의 가입을 진심으로 축하합니다 !</h1>\n");
      out.write("         \n");
      out.write("         <table class=\"table table-striped\">\n");
      out.write("         <tr>\n");
      out.write("         <th colspan=\"2\">등급별 혜택</th>\n");
      out.write("         </tr>\n");
      out.write("         <tr>\n");
      out.write("         <td>\n");
      out.write("         A\n");
      out.write("         </td>\n");
      out.write("         <td>\n");
      out.write("         구매금액의 2% 포인트로 적립\n");
      out.write("         </td>\n");
      out.write("         </tr>\n");
      out.write("         <tr>\n");
      out.write("         <td>\n");
      out.write("         B\n");
      out.write("         </td>\n");
      out.write("         <td>\n");
      out.write("         구매금액의 1.5% 포인트로 적립\n");
      out.write("         </td>\n");
      out.write("         </tr>\n");
      out.write("         <tr>\n");
      out.write("         <td>\n");
      out.write("         C\n");
      out.write("         </td>\n");
      out.write("         <td>\n");
      out.write("         구매금액의 1% 포인트로 적립\n");
      out.write("         </td>\n");
      out.write("         </tr>\n");
      out.write("         <tr>\n");
      out.write("         <td>\n");
      out.write("         D(일반회원)\n");
      out.write("         </td>\n");
      out.write("         <td>\n");
      out.write("         구매금액의 0.5% 포인트로 적립\n");
      out.write("         </td>\n");
      out.write("         </tr>\n");
      out.write("         </table>\n");
      out.write("            <br />\n");
      out.write("         ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("    \n");
      out.write("            \n");
      out.write("        ");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("        <script>\n");
      out.write("            // Create new wheel object specifying the parameters at creation time.\n");
      out.write("            let theWheel = new Winwheel({\n");
      out.write("                'numSegments'  : 8,     // Specify number of segments.\n");
      out.write("                'outerRadius'  : 212,   // Set outer radius so wheel fits inside the background.\n");
      out.write("                'textFontSize' : 28,    // Set font size as desired.\n");
      out.write("                'segments'     :        // Define segments including colour and text.\n");
      out.write("                [\n");
      out.write("                   {'fillStyle' : '#eae56f', 'text' : 'A'},\n");
      out.write("                   {'fillStyle' : '#89f26e', 'text' : 'B'},\n");
      out.write("                   {'fillStyle' : '#7de6ef', 'text' : 'C'},\n");
      out.write("                   {'fillStyle' : '#e7706f', 'text' : 'D'},\n");
      out.write("                   {'fillStyle' : '#eae56f', 'text' : 'A'},\n");
      out.write("                   {'fillStyle' : '#89f26e', 'text' : 'B'},\n");
      out.write("                   {'fillStyle' : '#7de6ef', 'text' : 'C'},\n");
      out.write("                   {'fillStyle' : '#e7706f', 'text' : 'D'}\n");
      out.write("                ],\n");
      out.write("                'animation' :           // Specify the animation to use.\n");
      out.write("                {\n");
      out.write("                    'type'     : 'spinToStop',\n");
      out.write("                    'duration' : 5,     // Duration in seconds.\n");
      out.write("                    'spins'    : 8,     // Number of complete spins.\n");
      out.write("                    'callbackFinished' : alertPrize\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            // Vars used by the code in this page to do power controls.\n");
      out.write("            let wheelPower    = 0;\n");
      out.write("            let wheelSpinning = false;\n");
      out.write("\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            // Function to handle the onClick on the power buttons.\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            function powerSelected(powerLevel)\n");
      out.write("            {\n");
      out.write("                // Ensure that power can't be changed while wheel is spinning.\n");
      out.write("                if (wheelSpinning == false) {\n");
      out.write("                    // Reset all to grey incase this is not the first time the user has selected the power.\n");
      out.write("                    document.getElementById('pw1').className = \"\";\n");
      out.write("                    document.getElementById('pw2').className = \"\";\n");
      out.write("                    document.getElementById('pw3').className = \"\";\n");
      out.write("\n");
      out.write("                    // Now light up all cells below-and-including the one selected by changing the class.\n");
      out.write("                    if (powerLevel >= 1) {\n");
      out.write("                        document.getElementById('pw1').className = \"pw1\";\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if (powerLevel >= 2) {\n");
      out.write("                        document.getElementById('pw2').className = \"pw2\";\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if (powerLevel >= 3) {\n");
      out.write("                        document.getElementById('pw3').className = \"pw3\";\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // Set wheelPower var used when spin button is clicked.\n");
      out.write("                    wheelPower = powerLevel;\n");
      out.write("\n");
      out.write("                    // Light up the spin button by changing it's source image and adding a clickable class to it.\n");
      out.write("                    document.getElementById('spin_button').src = \"/resources/img/spin_on.png\";\n");
      out.write("                    document.getElementById('spin_button').className = \"clickable\";\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            // Click handler for spin button.\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            function startSpin()\n");
      out.write("            {\n");
      out.write("                // Ensure that spinning can't be clicked again while already running.\n");
      out.write("                if (wheelSpinning == false) {\n");
      out.write("                    // Based on the power level selected adjust the number of spins for the wheel, the more times is has\n");
      out.write("                    // to rotate with the duration of the animation the quicker the wheel spins.\n");
      out.write("                    if (wheelPower == 1) {\n");
      out.write("                        theWheel.animation.spins = 3;\n");
      out.write("                    } else if (wheelPower == 2) {\n");
      out.write("                        theWheel.animation.spins = 8;\n");
      out.write("                    } else if (wheelPower == 3) {\n");
      out.write("                        theWheel.animation.spins = 15;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // Disable the spin button so can't click again while wheel is spinning.\n");
      out.write("                    document.getElementById('spin_button').src       = \"/resources/img/spin_off.png\";\n");
      out.write("                    document.getElementById('spin_button').className = \"\";\n");
      out.write("\n");
      out.write("                    // Begin the spin animation by calling startAnimation on the wheel object.\n");
      out.write("                    theWheel.startAnimation();\n");
      out.write("\n");
      out.write("                    // Set to true so that power can't be changed and spin button re-enabled during\n");
      out.write("                    // the current animation. The user will have to reset before spinning again.\n");
      out.write("                    wheelSpinning = true;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            // Function for reset button.\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            function resetWheel()\n");
      out.write("            {\n");
      out.write("                theWheel.stopAnimation(false);  // Stop the animation, false as param so does not call callback function.\n");
      out.write("                theWheel.rotationAngle = 0;     // Re-set the wheel angle to 0 degrees.\n");
      out.write("                theWheel.draw();                // Call draw to render changes to the wheel.\n");
      out.write("\n");
      out.write("                document.getElementById('pw1').className = \"\";  // Remove all colours from the power level indicators.\n");
      out.write("                document.getElementById('pw2').className = \"\";\n");
      out.write("                document.getElementById('pw3').className = \"\";\n");
      out.write("\n");
      out.write("                wheelSpinning = false;          // Reset to false to power buttons and spin can be clicked again.\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            // Called when the spin animation has finished by the callback feature of the wheel because I specified callback in the parameters\n");
      out.write("            // note the indicated segment is passed in as a parmeter as 99% of the time you will want to know this to inform the user of their prize.\n");
      out.write("            // -------------------------------------------------------\n");
      out.write("            \n");
      out.write("              async function putGrade(memData){\n");
      out.write("            try {\n");
      out.write("                 const url='/event';\n");
      out.write("                 const config={\n");
      out.write("                     method : 'post',\n");
      out.write("                     headers : {\n");
      out.write("                         'content-type':'application/json; charset=utf-8'\n");
      out.write("                     },\n");
      out.write("                     body:JSON.stringify(memData)\n");
      out.write("                 };\n");
      out.write("                 const resp=await fetch(url,config);\n");
      out.write("                 const result=await resp.text();\n");
      out.write("                 return result; \n");
      out.write("             } catch (error) {\n");
      out.write("                 console.log(error);\n");
      out.write("             }\n");
      out.write("         }\n");
      out.write("            \n");
      out.write("            function alertPrize(indicatedSegment)\n");
      out.write("            {\n");
      out.write("               const mnoVal = '");
      if (_jspx_meth_c_005fout_005f0(_jspx_page_context))
        return;
      out.write("';\n");
      out.write("             console.log(mnoVal);\n");
      out.write("             \n");
      out.write("                  const mem_rating=indicatedSegment.text;\n");
      out.write("             console.log(mem_rating);\n");
      out.write("             let memData={\n");
      out.write("                mem_num:mnoVal,\n");
      out.write("                mem_rating:mem_rating\n");
      out.write("             };\n");
      out.write("             \n");
      out.write("              putGrade(memData).then(result=>{\n");
      out.write("                 if(result>0){\n");
      out.write("                      alert(mem_rating+\"등급 혜택에 당첨되셨습니다 !!!\");\n");
      out.write("                    location.href=\"/mem/logOut\";\n");
      out.write("                 }\n");
      out.write("              })\n");
      out.write("             \n");
      out.write("            }\n");
      out.write("               \n");
      out.write("                \n");
      out.write("                \n");
      out.write("       \n");
      out.write("        </script>\n");
      out.write("        \n");
      out.write("   \n");
      out.write("        \n");
      out.write("            </div>\n");
      out.write(" ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "./layout/footer.jsp", out, false);
      out.write("   \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /WEB-INF/views/event.jsp(69,9) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ses.mem_rating ne null}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("            ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ses.mem_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("님은 이미 이벤트에 참여하였습니다.!!!\n");
          out.write("            ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ses.mem_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write(" 등급 : ");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ses.mem_rating}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\n");
          out.write("         ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /WEB-INF/views/event.jsp(74,8) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ses.mem_rating eq null}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("       \n");
          out.write("        <div align=\"center\">\n");
          out.write("            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n");
          out.write("                <tr>\n");
          out.write("                    <td>\n");
          out.write("                        <div class=\"power_controls\">\n");
          out.write("                            <br />\n");
          out.write("                            <br />\n");
          out.write("                            <table class=\"power\" cellpadding=\"10\" cellspacing=\"0\">\n");
          out.write("                                <tr>\n");
          out.write("                                    <th align=\"center\">Power</th>\n");
          out.write("                                </tr>\n");
          out.write("                                <tr>\n");
          out.write("                                    <td width=\"78\" align=\"center\" id=\"pw3\" onClick=\"powerSelected(3);\">High</td>\n");
          out.write("                                </tr>\n");
          out.write("                                <tr>\n");
          out.write("                                    <td align=\"center\" id=\"pw2\" onClick=\"powerSelected(2);\">Med</td>\n");
          out.write("                                </tr>\n");
          out.write("                                <tr>\n");
          out.write("                                    <td align=\"center\" id=\"pw1\" onClick=\"powerSelected(1);\">Low</td>\n");
          out.write("                                </tr>\n");
          out.write("                            </table>\n");
          out.write("                            <br />\n");
          out.write("                            <img id=\"spin_button\" src=\"/resources/img/spin_off.png\" alt=\"Spin\" onClick=\"startSpin();\" />\n");
          out.write("                            \n");
          out.write("                        </div>\n");
          out.write("                    </td>\n");
          out.write("                    <td width=\"438\" height=\"582\" class=\"the_wheel\" align=\"center\" valign=\"center\">\n");
          out.write("                        <canvas id=\"canvas\" width=\"434\" height=\"434\">\n");
          out.write("                            <p style=\"{color: white}\" align=\"center\">Sorry, your browser doesn't support canvas. Please try another.</p>\n");
          out.write("                        </canvas>\n");
          out.write("                    </td>\n");
          out.write("                </tr>\n");
          out.write("            </table>\n");
          out.write("        </div>\n");
          out.write("        ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fout_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:out
    org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
    boolean _jspx_th_c_005fout_005f0_reused = false;
    try {
      _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fout_005f0.setParent(null);
      // /WEB-INF/views/event.jsp(245,31) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fout_005f0.setValue((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ses.mem_num}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
      if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
      _jspx_th_c_005fout_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
    }
    return false;
  }
}
