package com.ezen.book.service;

import java.util.List;
import java.util.regex.Pattern;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.tika.sax.xpath.Matcher;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.ezen.book.domain.MemberVO;
import com.ezen.book.domain.PagingVO;
import com.ezen.book.repository.MemberDAO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class MemberServiceImpl implements MemberService {
	@Inject
	private MemberDAO mdao;
	@Inject
	BCryptPasswordEncoder passwordEncoder;
	private String pwCheck; //ajax에서 넘어온 pw를 저장할 변수

	@Override
	public String idCheck(String mem_id) {
		// 아이디가 중복되면 회원가입 실패
		// 아이디와 일치하는 정보를 db에서 가져옴
		MemberVO tmpUser = mdao.getId(mem_id);
		// tmpUser가 null이 아니라면(이미 가입된 회원) -> 아이디 중복 -> 회원가입 실패
		// null이면 회원가입시켜주기
		if (tmpUser != null) {
			return "id_duplicate";
		}
		// 아이디가 중복되지 않았으면 회원가입
		// 아이디 유효성 검사 -> 맞으면 체크, 아니면 실패
		// 우선 아이디가 입력이 되었는지만 체크하기
		if (mem_id == null || mem_id.length() == 0) {
			return "id_null";
		}
		return "id_ok";
	}

	@Override
	public String pwCheck(String mem_pw) {
		// 비밀번호 유효성 검사 : 비밀번호가 입력되었는지 체크
		// 정규식 (영문(대소문자 구분), 숫자, 특수문자 조합, 9~12자리)
		String pwPattern = "^(?=.*\\d)(?=.*[~`!@#$%\\^&*()-])(?=.*[a-z])(?=.*[A-Z]).{9,12}$";
		pwCheck = mem_pw;

		// null값일 경우
		if (pwCheck == null || pwCheck.length() == 0) {
			return "pw_null";
		}
		// 비밀번호와 정규표현식 비교
		java.util.regex.Matcher matcher = Pattern.compile(pwPattern).matcher(pwCheck);
		if (!matcher.matches()) { // 정규식에 어긋난다면 재작성 요청하기
			return "pw_rewrite";
		}
		return "pw_ok";
	}

	@Override
	public String pwCheckRe(String mem_pwRe) {
		log.info("pw_check 테스트 : "+pwCheck);
	
		// null값일 경우
		if (mem_pwRe == null || mem_pwRe.length() == 0) {
			return "pwRe_null";
		}
		// 비밀번호와 비밀번호재입력값이 맞는지 확인
		if (pwCheck.equals(mem_pwRe)) {
			return "pwRe_ok";
		}
		return "pwRe_rewrite";
	}

	@Override
	public String cellNumCheck(String mem_cell_num) {
		String tmpCell_num = mdao.getCellNum(mem_cell_num);
		if (mem_cell_num == null || mem_cell_num.length() == 0) {
			return "cellNum_null";
		}
		if (mem_cell_num.length() != 11) {
			return "cellNum_null";
		}
		if (tmpCell_num != null) {
			return "cellNum_duplicate";
		}
		return "cellNum_ok";
	}

	@Override
	public String join(MemberVO mvo) {
		// 회원가입
		// 비밀번호를 암호화 과정
		String pw = mvo.getMem_pw();
		// encode라는 객체를 이용하면 암호화가 됨
		// matches 를 이용하여 (원래비번, 암호화된 비번) 일치하는지 체크
		String encodePw = passwordEncoder.encode(pw); // 암호화된 패스워드
		// 회원비밀번호를 암호화된 비밀번호로 수정
		mvo.setMem_pw(encodePw);
		// 회원가입 -> insert
		int isOk = mdao.insertMember(mvo);
		log.info("join isOk : " + isOk);
		return isOk > 0 ? "join_Ok" : "join_Fail";
	}

	@Override
	public MemberVO login(String id, String pw) {
		MemberVO member = mdao.getId(id);
		if (member == null) {
			return null;
		}

		if (passwordEncoder.matches(pw, member.getMem_pw())) {
			return member;
		} else {

			return null;
		}
	}

	@Override
	public int usermodify(MemberVO mvo) {
		log.info(">>> member modify check msvI");
		String pw = mvo.getMem_pw();
		String encodePw = passwordEncoder.encode(pw); // 암호화된 패스워드
		// 회원비밀번호를 암호화된 비밀번호로 수정
		mvo.setMem_pw(encodePw);
		return mdao.usermodify(mvo);

	}

	@Override
	public String getId(MemberVO mvo) {
		String id = mdao.getIdSearch(mvo);
		if (id != null) {
			return id;
		} else {
			return null;
		}

	}

	@Override
	public String getPw(MemberVO mvo) {
		String pw = mdao.getPwSearch(mvo);
		log.info("pw 확인 : " + pw);

		if (pw != null) {
			return pw;
		} else {
			return null;
		}
	}

	@Override
	public int update(String mem_ad) {
		return mdao.updateAdderess(mem_ad);
	}

	@Override
	public int newPwUpdate(MemberVO mvo) {

		String encodePw = passwordEncoder.encode(mvo.getMem_pw());

		mvo.setMem_pw(encodePw);

		return mdao.newPwUpdate(mvo);
	}

	@Override
	public int deleteMember(int mem_num) {
		log.info(">>> member de;ete check msvI");
		return mdao.memberDelete(mem_num);
	}

	@Override
	public List<MemberVO> getMemList(PagingVO pvo) {
		return mdao.memberList(pvo);
	}

	@Override
	public int removeMem(int mem_num, MemberVO member) {
		log.info(">> 회원탈퇴 체크2<<");
		return mdao.memRemove(mem_num);
	}

	public MemberVO getMember(HttpServletRequest req) {
		MemberVO mem = (MemberVO) req.getSession().getAttribute("ses");
		return mem;
	}

	@Override
	public int totalCount() {

		return mdao.totalCount();
	}

}
